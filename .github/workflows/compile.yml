name: Build and Deploy

on:
  - push
  # :
  #     tags:
  #       - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os: 
          - windows-2019
        arch:
          - amd64
          - x86
      max-parallel: 3
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
          toolset: 14.0
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1  # not v2!
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.3'
          host: 'windows'
          target: 'desktop'
          arch: ${{ matrix.arch == 'amd64' && 'win64_msvc2017_64' || 'win32_msvc2017' }}
          dir: '${{ github.workspace }}'
          install-deps: 'true'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          setup-python: 'true'
          tools: 'tools_ifw tools_qtcreator,qt.tools.qtcreator'
          aqtversion: '==2.0.0'
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12
      - name: Build
        run: |
          cmake -G "Visual Studio 14 2015 Win64" .
          cmake --build . --config Release
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: TelegramWatchdog.${{ matrix.os }}_${{ matrix.arch }}.dll
          path: Release\TelegramWatchdog.dll

  # release:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         draft: false
  #         prerelease: false

  #   outputs:
  #     upload_url: ${{ steps.create_release.outputs.upload_url }}

  # upload:
  #   needs: release
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #     max-parallel: 3
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ matrix.os }}

  #     - name: chmod
  #       if: startsWith(matrix.os, 'ubuntu')
  #       run: chmod +x TS5AddonInstaller_Linux

  #     - name: Upload Windows Asset
  #       if: startsWith(matrix.os, 'windows')
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ needs.release.outputs.upload_url }}
  #         asset_path: TS5AddonInstaller_Win.exe
  #         asset_name: TS5AddonInstaller_Win.exe
  #         asset_content_type: application/x-executable